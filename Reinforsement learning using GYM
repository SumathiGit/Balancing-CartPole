#Balancing the CartPole-v0 using gym (Reinforcement Learning)

import gym

from gym import envs

for e in envs.registry.all():
print(e)

import gym
env = gym.make('CartPole-v0')
env.reset()
env.render()

print(env.action_space)
print(env.observation_space)

import gym
env = gym.make('CartPole-v0')
for i in range(20):
observation = env.reset()
for t in range(100):
env.render()
print(observation)
action = env.action_space.sample()
observation, reward, done, info = env.step(action)
if done:
print('Episode finished after {} timesteps'.format(t+1))
break

#Balancing the CartPole-

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.autograd import Variable

import gym
import numpy as np
from collections import deque
import random

#Building the neural network and mapping them

class DQN(nn.Module):

def __init__(self, input_dim, output_dim):
    super(DQN, self).__init__()
    self.linear1 = nn.Linear(input_dim, 120)
    self.linear2 = nn.Linear(120, output_dim)
    
def forward(self, input):
    out = self.linear1(input)
    out = F.relu(out)
    out = self.linear2(out)
    return out
#Building the Agent

class DQNAgent:
def init(self, state_size, action_size):

    self.state_size = state_size
    self.action_size = action_size
    self.memory = deque(maxlen=2000)
    self.gamma = 0.95
    self.epsilon = 0.01
    self.epsilon_min = 0.01
    self.epsilon_decay = 0.995
    self.learning_rate = 0.001
    
    
    self.model = DQN(state_size, action_size)
    self.criteria = nn.MSELoss()
    self.opt = optim.Adam(self.model.parameters(), lr=self.learning_rate)
    
    
def remember(self, state, action, reward, next_state, done):
    self.memory.append((state, action, reward, next_state, done))
    
def act(self, state):
    if np.random.rand() <= self.epsilon:
        return random.randrange(self.action_size)
    

    act_values = self.model(Variable(torch.Tensor(state))).data.numpy()
    return np.argmax(act_values[0])

def replay(self, batch_size):
    minibatch = random.sample(self.memory, batch_size)
    
    
    for state, action, reward, next_state, done in minibatch:
        target = reward
        if not done:
            next_state_v = Variable(torch.Tensor(next_state))
            target = (reward + self.gamma * np.amax(self.model(next_state_v).data.numpy()[0]))
            
        target_actual = self.model(Variable(torch.Tensor(state))).data.numpy()
        target_actual[0][action] = target
        
        self.opt.zero_grad()
        out = self.model(Variable(torch.Tensor(state)))
        loss = self.criteria(out, Variable(torch.Tensor(target_actual)))
        loss.backward()
        self.opt.step()
        
    if self.epsilon > self.epsilon_min:
        self.epsilon *= self.epsilon_decay
#Train the Model

EPISODES = 1000
env = gym .make('CartPole-v1')
state_size = env.observation_space.shape[0]
action_size = env.action_space.n
agent = DQNAgent(state_size, action_size)
done = False
batch_size = 32

for a in range(EPISODES):
state = env.reset()
state = np.reshape(state, [1,state_size])

for time in range(500):
    action = agent.act(state)
    next_state, reward, done, _ = env.step(action)
    reward = reward if not done else -10
    next_state = np.reshape(next_state,[1, state_size])
    agent.remember(state, action, reward, next_state, done)
    state = next_state
    
    
    if done:
        print("episodes: {}/{}, score: {}, e: {:.2}".format(e, EPISODES, time, agent.epsilon))
        break
        
        
    if len(agent.memory) > batch_size:
        agent.replay(batch_size)
#Balancing the CartPole-v1 using the agent

import time
env = gym.make('CartPole-v1')
state_size = env.observation_space.shape[0]
action_size = env.action_space.n
agent = DQAgent(state_size, action_size)

agent.load()
state = env.reset()
state = np.reshape(state, [1, state_size])

for t in range[500]:
env.render()
action = agent.act(state)
next_state, reward, done, _ = env.step(action)
reward = reward if not done else -10
next_state = np.reshape(next_state, [1,state_size])
state= next_state
time.sleep(0.1)
if done:
e = 1
pprint("score: {}, e: {:.2}".format(t, agent, epsilon))
break

